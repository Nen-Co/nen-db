name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  ZIG_VERSION: "0.15.1"

jobs:
  # Single comprehensive job that does everything
  test-and-build:
    name: Test and Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build-mode: [ReleaseFast]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup dependencies
      shell: bash
      run: |
        echo "üîó Setting up dependencies"
        echo "Current directory: $(pwd)"
        echo "Contents: $(ls -la)"
        
        # Clone dependencies in the correct location relative to nen-db
        cd ..
        echo "Parent directory: $(pwd)"
        echo "Contents: $(ls -la)"
        
        # Clone dependencies if they don't exist
        if [ ! -d "nen-core" ]; then
          echo "Cloning nen-core..."
          git clone https://github.com/Nen-Co/nen-core.git
        else
          echo "nen-core already exists"
        fi
        if [ ! -d "nen-io" ]; then
          echo "Cloning nen-io..."
          git clone https://github.com/Nen-Co/nen-io.git
        else
          echo "nen-io already exists"
        fi
        if [ ! -d "nen-json" ]; then
          echo "Cloning nen-json..."
          git clone https://github.com/Nen-Co/nen-json.git
        else
          echo "nen-json already exists"
        fi
        if [ ! -d "nen-net" ]; then
          echo "Cloning nen-net..."
          git clone https://github.com/Nen-Co/nen-net.git
        else
          echo "nen-net already exists"
        fi
        
        # Verify dependencies are cloned
        echo "üìÅ Dependencies cloned:"
        ls -la | grep nen-
        
        # Verify the expected structure
        echo "üìÅ Checking nen-core structure:"
        if [ -d "nen-core" ]; then
          ls -la nen-core/
          if [ -f "nen-core/src/lib.zig" ]; then
            echo "‚úÖ nen-core/src/lib.zig exists"
          else
            echo "‚ùå nen-core/src/lib.zig missing"
          fi
        else
          echo "‚ùå nen-core directory missing"
        fi
        
        cd nen-db

    - name: Install Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        zig-version: ${{ env.ZIG_VERSION }}

    - name: Cache Zig build
      uses: actions/cache@v3
      with:
        path: .zig-cache
        key: zig-${{ matrix.os }}-${{ matrix.build-mode }}-${{ hashFiles('**/*.zig') }}

    - name: Build and Test
      run: |
        echo "üîç Building ${{ matrix.build-mode }} on ${{ matrix.os }}"
        
        # Build the project
        zig build --release=${{ matrix.build-mode == 'Debug' && 'safe' || 'fast' }}
        
        # Run tests
        zig build test
        
        # Test specific executables
        zig build nendb
        zig build nendb-http-server
        zig build nendb-tcp-server

    - name: Test WASM build
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "üåê Testing WASM build"
        zig build nendb-wasm

    - name: Run integration demo
      if: matrix.os == 'ubuntu-latest' && matrix.build-mode == 'ReleaseFast'
      run: |
        echo "üöÄ Running integration demo"
        zig build demo-nen-core

  # Windows-specific build (separate due to different shell requirements)
  test-windows:
    name: Test Windows
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup dependencies
      shell: cmd
      run: |
        echo Setting up dependencies
        mkdir ..\deps
        cd ..\deps
        
        git clone https://github.com/Nen-Co/nen-core.git
        git clone https://github.com/Nen-Co/nen-io.git
        git clone https://github.com/Nen-Co/nen-json.git
        git clone https://github.com/Nen-Co/nen-net.git
        
        echo Dependencies cloned:
        dir | findstr nen
        
        cd ..\nen-db

    - name: Install Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        zig-version: ${{ env.ZIG_VERSION }}

    - name: Build and Test
      shell: cmd
      run: |
        echo Building ReleaseFast on Windows
        zig build --release=fast
        zig build test
        zig build nendb
        zig build nendb-http-server
        zig build nendb-tcp-server