name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  ZIG_VERSION: "0.15.1"
  RUST_VERSION: "stable"

jobs:
  # Job 1: Build Validation
  build-validation:
    name: Build Validation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        zig-version: ["0.15.1"]
        build-mode: [Debug, ReleaseSafe, ReleaseFast, ReleaseSmall]
        exclude:
          # Skip Debug on Windows to speed up CI
          - os: windows-latest
            build-mode: Debug

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        zig-version: ${{ matrix.zig-version }}

    - name: Cache Zig build
      uses: actions/cache@v3
      with:
        path: .zig-cache
        key: zig-${{ matrix.os }}-${{ matrix.zig-version }}-${{ matrix.build-mode }}-${{ hashFiles('**/*.zig') }}

    - name: Validate build
      run: |
        echo "üîç Testing ${{ matrix.build-mode }} build on ${{ matrix.os }}"
        zig build --release=${{ matrix.build-mode == 'Debug' && 'safe' || matrix.build-mode == 'ReleaseSafe' && 'safe' || matrix.build-mode == 'ReleaseFast' && 'fast' || 'small' }}

    - name: Run build validation script
      run: |
        echo "üîç Running comprehensive build validation"
        zig run scripts/validate-build.zig

    - name: Test specific executables
      run: |
        echo "üß™ Testing specific executables"
        zig build nendb
        zig build nendb-production
        zig build nendb-http-server
        zig build nendb-tcp-server
        zig build nendb-wasm

  # Job 2: Cross-Compilation Testing
  cross-compilation:
    name: Cross-Compilation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [
          "x86_64-linux-gnu",
          "x86_64-macos",
          "aarch64-macos", 
          "x86_64-windows-gnu",
          "wasm32-freestanding"
        ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        zig-version: ${{ env.ZIG_VERSION }}

    - name: Test cross-compilation
      run: |
        echo "üåç Testing cross-compilation to ${{ matrix.target }}"
        zig build --release=fast -Dtarget=${{ matrix.target }}

  # Job 3: Dependency Validation
  dependency-validation:
    name: Dependency Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        zig-version: ${{ env.ZIG_VERSION }}

    - name: Validate nen-core dependency
      run: |
        echo "üîó Validating nen-core dependency"
        if [ ! -d "../nen-core" ]; then
          echo "‚ùå nen-core dependency not found"
          exit 1
        fi
        cd ../nen-core && zig build test

    - name: Validate nen-io dependency
      run: |
        echo "üîó Validating nen-io dependency"
        if [ ! -d "../nen-io" ]; then
          echo "‚ùå nen-io dependency not found"
          exit 1
        fi
        cd ../nen-io && zig build test

    - name: Validate nen-json dependency
      run: |
        echo "üîó Validating nen-json dependency"
        if [ ! -d "../nen-json" ]; then
          echo "‚ùå nen-json dependency not found"
          exit 1
        fi
        cd ../nen-json && zig build test

    - name: Validate nen-net dependency
      run: |
        echo "üîó Validating nen-net dependency"
        if [ ! -d "../nen-net" ]; then
          echo "‚ùå nen-net dependency not found"
          exit 1
        fi
        cd ../nen-net && zig build test

  # Job 4: Performance Testing
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        zig-version: ${{ env.ZIG_VERSION }}

    - name: Run performance tests
      run: |
        echo "‚ö° Running performance tests"
        zig build --release=fast test-performance

    - name: Run nen-core integration demo
      run: |
        echo "üöÄ Running nen-core integration demo"
        zig build --release=fast demo-nen-core

    - name: Run benchmarks
      run: |
        echo "üìä Running benchmarks"
        zig build --release=fast test-algorithms

  # Job 5: Security Scanning
  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        zig-version: ${{ env.ZIG_VERSION }}

    - name: Run security analysis
      run: |
        echo "üîí Running security analysis"
        # Check for unsafe patterns
        if grep -r "unsafe" src/ --include="*.zig"; then
          echo "‚ö†Ô∏è  Found unsafe code patterns"
        fi
        
        # Check for memory leaks
        if grep -r "malloc\|free" src/ --include="*.zig"; then
          echo "‚ö†Ô∏è  Found manual memory management"
        fi

  # Job 6: Documentation Validation
  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        echo "üìö Validating documentation"
        
        # Check for README files
        if [ ! -f "README.md" ]; then
          echo "‚ùå README.md missing"
          exit 1
        fi
        
        # Check for API documentation
        if [ ! -f "docs/API.md" ]; then
          echo "‚ö†Ô∏è  API documentation missing"
        fi
        
        # Check for contribution guidelines
        if [ ! -f "CONTRIBUTING.md" ]; then
          echo "‚ö†Ô∏è  CONTRIBUTING.md missing"
        fi

  # Job 7: Release Preparation
  release-preparation:
    name: Release Preparation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        zig-version: ${{ env.ZIG_VERSION }}

    - name: Build release artifacts
      run: |
        echo "üì¶ Building release artifacts"
        
        # Build for multiple platforms
        zig build --release=fast -Dtarget=x86_64-linux-gnu
        zig build --release=fast -Dtarget=x86_64-macos
        zig build --release=fast -Dtarget=aarch64-macos
        zig build --release=fast -Dtarget=x86_64-windows-gnu
        zig build --release=fast -Dtarget=wasm32-freestanding

    - name: Create release archive
      run: |
        echo "üì¶ Creating release archive"
        tar -czf nendb-release.tar.gz zig-out/

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nendb-release-artifacts
        path: nendb-release.tar.gz

  # Job 8: Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-validation, cross-compilation, dependency-validation, performance-testing, security-scanning, documentation-validation]
    if: always()

    steps:
    - name: Notify success
      if: needs.build-validation.result == 'success' && needs.cross-compilation.result == 'success' && needs.dependency-validation.result == 'success'
      run: |
        echo "‚úÖ All CI/CD checks passed!"
        echo "üöÄ Ready for deployment"

    - name: Notify failure
      if: needs.build-validation.result == 'failure' || needs.cross-compilation.result == 'failure' || needs.dependency-validation.result == 'failure'
      run: |
        echo "‚ùå CI/CD checks failed!"
        echo "üîß Please fix the issues before merging"
        exit 1
